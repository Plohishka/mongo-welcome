db;

db.createCollection('manufacturers', {
    validator: {
        $jsonSchema: {
            bsonType: 'object',
            required: ['name'],
            properties: {
                name: {
                    bsonType: 'string'
                },
                address: {
                    bsonType: 'object',
                    required: ['country', 'city']
                }
            }
        }
    }
});


db.manufacturers.insertMany([
    {
        name: 'First'
    },
    {
        name: 'Second',
        address: {
            country: 'UK',
            city: 'London'
        }
    }
]);

///////////////

db.createCollection('products', {
    validator: {
        $jsonSchema: {
            bsonType: 'object',
            required: ['name', 'price', 'amount', 'manufacturerId'],
            properties: {
                name: {
                    bsonType: 'string'
                },
                price: {
                    bsonType: 'double'
                },
                amount: {
                    bsonType: 'int'
                },
                expiredDate: {
                    bsonType: 'date'
                },
                manufacturerId: {
                    bsonType: 'objectId'
                }
            }
        }
    }
});

db.products.insertMany([
    {
        name: 'Samsung',
        price: 1542.25,
        amount: 5,
        manufacturerId: new ObjectId('658d6a6a43728120aa55602e')
    },
    {
        name: 'Xiaomu',
        price: 1215.5,
        amount: 2,
        manufacturerId: new ObjectId('658d6a6a43728120aa55602e')
    },
    {
        name: 'Sony',
        price: 1111.1,
        amount: 3,
        manufacturerId: new ObjectId('658d6a6a43728120aa55602e')
    }
]);

db.products.aggregate([                                                                               //!!!!!!!!!!!!!!!!!
    {
        $lookup: {
            from: 'manufacturers',
            localField: 'manufacturerId',
            foreignField: '_id',
            as: 'manufacturer'
        }
    },
    {
        $unwind: '$manufacturer'     //распаковывает массив
    },
    {
        $unset: 'manufacturerId'    //удаляет указанное поле
    },
    {
        $group: {
            _id: '$manufacturer.name',   //ключ по которому сгрупировали
            countProducts: {
                $sum: '$amount'                    //колличество товара
            }
        }
    }
]);


//SORT

db.products.aggregate([
    {
        $sort: {
            price: 1   //сортировка по цене на увеличение  (-1 на уменьшение)
        }
    }, {
        $limit: 3
    }
]);

//Pagination

db.products.find().limit(3).skip(2);   //skip(2) - пропустить первые 2


///////////////////////////////

db.createCollection('students', {
    validator: {
        $jsonSchema: {
            bsonType: 'object',
            required: ['firstName', 'lastName', 'email', 'group'],
            properties: {
                firstName: {
                    bsonType: 'string'
                },
                lastName: {
                    bsonType: 'string'
                },
                email: {
                    bsonType: 'string'
                },
                group: {
                    bsonType: 'int'
                }
            }
        }
    }
});


db.students.insertMany([
    {
        firstName: 'Alex',
        lastName: 'Row',
        email: 'alex@row.rt',
        group: 5
    },
    {
        firstName: 'Bob',
        lastName: 'Mirgan',
        email: 'bob@mirg.rt',
        group: 2
    },
    {
        firstName: 'Jack',
        lastName: 'Back',
        email: 'jack@back.rt',
        group: 5
    },
]);

db.students.find();

db.createCollection('groups', {
    validator: {
        $jsonSchema: {
            bsonType: 'object',
            required: ['name', 'teacher'],
            properties: {
                name: {
                    bsonType: 'int'
                },
                teacher: {
                    bsonType: 'string'
                }
            }
        }
    }
});


db.groups.insertMany([
    {
        name: 5,
        teacher: 'Malouvski'
    },
    {
        name: 2,
        teacher: 'Perty'
    }
]);

db.groups.find();



db.students.aggregate([
    {
        $lookup: {
          from: 'groups',
          localField: 'groupId',
          foreignField: '_id',
          as: 'group'
        }
    },
    {
        $group: {
            _id: 'groups.name',
            countProducts: {
                $sum: '$amount'
            }
        }
    }
]);


































